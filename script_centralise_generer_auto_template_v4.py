# script_centralise_generer_auto_template_v4.py de mani√®re flexible‚ÄØ:

# 1 Tous tes chapitres et sous-chapitres sont exactement comme ton sommaire.
# 2 Tous les dossiers standards (src, data, backup, exports, screenshots) sont cr√©√©s automatiquement.
# 3 Les fichiers .py, .ino, .csv, .json, .md sont cr√©√©s m√™me vides.
# 4 Les screenshots sont d√©j√† nomm√©s screenshot_console_01.png, screenshot_console_02.png.
# 5 Option de templates‚ÄØ: si un fichier mod√®le existe dans TEMPLATES/<type>/, il sera copi√© automatiquement.
# 6 R√©sum√© clair √† la fin pour v√©rifier ce qui a √©t√© cr√©√©.


# Il cr√©era tous les dossiers et fichiers standards pour tous tes chapitres/sub-projets, m√™me vides.
# Il copiera automatiquement les templates uniquement s‚Äôils existent dans TEMPLATES/<type>/.
# Si pour un sous-projet tu n‚Äôas pas de template (par ex. la plupart des chapitres IoT simples), il cr√©era juste des fichiers vides.
# Tu pourras ajouter les templates plus tard pour Django, API, ou tout autre projet sp√©cifique.
# üöÄ Fonctionnement propos√© :
# Tu cr√©es un dossier TEMPLATES √† la racine de IoT_Projects.
# Dedans, tu mets des fichiers mod√®les pour chaque type de projet :
# simulation/main.py
# arduino/main.ino
# simulation_ou_arduino/main.py
# Et si tu veux, d‚Äôautres fichiers .py ou .ino sp√©cifiques.
# Le script va copier automatiquement ces fichiers dans chaque sous-projet correspondant au lieu de cr√©er un fichier vide.
# Exemple de modification dans le script
# On ajoute une fonction copy_template :

# TEMPLATES_DIR = os.path.join(BASE_DIR, "TEMPLATES")

# def copy_template(proj_type, dest_path, filename):
#     template_path = os.path.join(TEMPLATES_DIR, proj_type, os.path.basename(filename))
#     if os.path.exists(template_path):
#         shutil.copy(template_path, dest_path)
#     else:
#         # Si le template n'existe pas, cr√©er fichier vide
#         create_file(dest_path)


# Puis, dans la boucle o√π on cr√©e les fichiers standards :

# for f in STANDARD_FILES.get(proj_type, []):
#     file_path = os.path.join(sub_path, f)
#     create_dir(os.path.dirname(file_path))
#     copy_template(proj_type, file_path, f)


# ‚úÖ Avec √ßa :

# Si tu as un template pour main.py ou main.ino, il sera copi√© automatiquement.

# Sinon, le fichier vide sera cr√©√© comme avant.

# On peut facilement √©tendre √† d‚Äôautres fichiers types ou m√™me des fichiers .md ou .json.


######

# ajouter/am√©liorer pour les templates Django/API

# 1 Sous-projet Django/API (Ch2_04_API_REST_Django, Ch3_03_Dashboard_Django_MongoDB, etc.)
# Actuellement, le type est "simulation". Pour les sous-projets Django/API, tu peux soit :

# Mettre type="django_api" et cr√©er un dossier TEMPLATES/django_api/ avec les fichiers main.py, urls.py, views.py, requirements.txt, README.md.
# Modifier la fonction copy_template() pour copier ces fichiers automatiquement dans le sous-projet.

# 2 Cr√©er automatiquement les fichiers backup et exports avec timestamp
# Pour l‚Äôinstant, les dossiers sont cr√©√©s, mais les fichiers backup_YYYYMMDD_HHMMSS.* et export_YYYYMMDD_HHMMSS.* ne sont pas g√©n√©r√©s. On peut ajouter cette partie pour qu‚Äôils soient pr√™ts √† l‚Äôusage.

# 3 Afficher un r√©sum√© plus d√©taill√©
# Par exemple :

# Les dossiers cr√©√©s
# Les fichiers cr√©√©s
# Les templates copi√©s


# G√®re les sous-projets Django/API avec les templates correspondants.
# Cr√©e les fichiers backup/exports avec timestamp.
# Affiche un r√©sum√© clair pour chaque sous-chapitre.

# version am√©lior√©e de script_centralise_generer_auto_template_v5.py qui inclut :

# Gestion automatique des sous-projets Django/API avec templates sp√©cifiques.
# Cr√©ation de fichiers backup et exports avec timestamp.
# R√©sum√© d√©taill√© de tout ce qui a √©t√© cr√©√© (dossiers, fichiers, templates).


‚úÖ Ce que fait ce script maintenant :

# 1 Cr√©e tous les chapitres et sous-chapitres avec les noms exacts.
# 2 Cr√©e les dossiers src, data, backup, exports, screenshots.
# 3 Cr√©e les fichiers standards selon le type (simulation, arduino, simulation_ou_arduino, django_api).
# 4 G√©n√®re les screenshots screenshot_console_01.png et screenshot_console_02.png.
# 5 Cr√©e automatiquement un fichier backup et un fichier export avec timestamp dans chaque sous-projet.
# 6 Copie les templates si disponibles dans TEMPLATES/<type>/.
# 7 Affiche un r√©sum√© clair de tout ce qui a √©t√© g√©n√©r√©.


# Si tu appuies sur o :

# Il va cr√©er ou compl√©ter tous les dossiers et fichiers pour Ch1_Acquisition_Donn√©es_Capteurs (donc tous les sous-chapitres 01 ‚Üí 04).
# Les autres chapitres ne seront pas touch√©s tant que tu ne les valides pas dans l‚Äôinteractif.
# Les fichiers existants ne seront pas remplac√©s, le script ajoute seulement ce qui manque (dossiers, fichiers vides ou templates, screenshots).

# Donc tu peux rester √† la racine et appuyer sur o sans risque de perdre ton travail actuel.

import os
import shutil
from datetime import datetime

# --------------------------------
# Configuration g√©n√©rale
# --------------------------------
BASE_DIR = os.path.abspath(".")  # Racine du projet IoT_Projects
STANDARD_DIRS = ["src", "data", "backup", "exports", "screenshots"]
NUM_SCREENSHOTS = 2  # nombre de screenshots par sous-projet

# Fichiers standards par type de projet
STANDARD_FILES = {
    "simulation": ["src/main.py", "data/sample.csv", "data/sample.json", "README.md"],
    "arduino": ["src/main.ino", "data/sample.csv", "README.md"],
    "simulation_ou_arduino": ["src/main.py", "data/sample.csv", "data/sample.json", "README.md"],
    "django_api": ["src/manage.py", "src/urls.py", "src/views.py", "requirements.txt", "README.md"]
}

# Dossier templates (optionnel)
TEMPLATES_DIR = os.path.join(BASE_DIR, "TEMPLATES")

# --------------------------------
# Sommaire complet (Ch1 ‚Üí Ch7 et sous-chapitres)
# --------------------------------
PROJECTS = {
    "Ch1_Acquisition_Donn√©es_Capteurs": {
        "01_CapteurVirtuel_Python": {"type": "simulation"},
        "02_LectureSerie_PySerial": {"type": "arduino"},
        "03_Stockage_SQLite": {"type": "simulation_ou_arduino"},
        "04_ExportCSV_Visualisation": {"type": "simulation_ou_arduino"},
    },
    "Ch2_Communication_MQTT_API": {
        "01_Serveur_MQTT": {"type": "simulation"},
        "02_Publish_subscribe_multi_clients": {"type": "simulation"},
        "03_Securisation_MQTT_SSL_TLS": {"type": "simulation"},
        "04_API_REST_Django": {"type": "django_api"},
    },
    "Ch3_Dashboards_Visualisation": {
        "01_Graphiques_temps_reel": {"type": "simulation"},
        "02_Application_interactive_Streamlit": {"type": "simulation"},
        "03_Dashboard_Django_MongoDB": {"type": "django_api"},
        "04_Dashboard_Grafana_InfluxDB": {"type": "simulation"},
    },
    "Ch4_Analyse_Predictive": {
        "01_Regression_lineaire": {"type": "simulation"},
        "02_Series_temporelles_ARIMA": {"type": "simulation"},
        "03_Detection_anomalies_IsolationForest": {"type": "simulation"},
        "04_Classification_sonore": {"type": "simulation"},
    },
    "Ch5_Securite_IoT": {
        "01_Auth_JWT_Django": {"type": "simulation"},
        "02_Chiffrement_AES": {"type": "simulation"},
        "03_Detection_intrusion_logs": {"type": "simulation"},
    },
    "Ch6_Cloud_Edge": {
        "01_AWS_IoT_Core": {"type": "simulation"},
        "02_Google_Cloud_IoT": {"type": "simulation"},
        "03_Edge_RaspberryPi": {"type": "simulation"},
        "04_Deploy_Docker": {"type": "simulation"},
    },
    "Ch7_Projets_Avances_IA": {
        "01_Reconnaissance_images": {"type": "simulation"},
        "02_Detection_evenements_audio": {"type": "simulation"},
        "03_Systeme_recommandation": {"type": "simulation"},
        "04_Projet_final_SmartHome": {"type": "simulation_ou_arduino"},
    }
}

# --------------------------------
# Fonctions utilitaires
# --------------------------------
def create_dir(path):
    if not os.path.exists(path):
        os.makedirs(path)
        print(f"üìÅ Dossier cr√©√© : {path}")

def create_file(path):
    if not os.path.exists(path):
        create_dir(os.path.dirname(path))
        with open(path, "w", encoding="utf-8") as f:
            pass  # fichier vide
        print(f"üìÑ Fichier cr√©√© : {path}")

def copy_template(proj_type, dest_path, filename):
    template_path = os.path.join(TEMPLATES_DIR, proj_type, os.path.basename(filename))
    if os.path.exists(template_path):
        create_dir(os.path.dirname(dest_path))
        shutil.copy(template_path, dest_path)
        print(f"üìÑ Template copi√© : {dest_path}")
    else:
        create_file(dest_path)

def create_screenshots(proj_path):
    screenshots_path = os.path.join(proj_path, "screenshots")
    create_dir(screenshots_path)
    for i in range(1, NUM_SCREENSHOTS + 1):
        create_file(os.path.join(screenshots_path, f"screenshot_console_{i:02}.png"))

def create_standard_dirs(proj_path):
    for d in STANDARD_DIRS:
        create_dir(os.path.join(proj_path, d))

def create_backup_export_files(proj_path):
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_file = os.path.join(proj_path, "backup", f"backup_{timestamp}.db")
    export_file = os.path.join(proj_path, "exports", f"export_{timestamp}.csv")
    create_file(backup_file)
    create_file(export_file)

# --------------------------------
# G√©n√©ration de l‚Äôarborescence compl√®te
# --------------------------------
for chapter, subs in PROJECTS.items():
    chapter_path = os.path.join(BASE_DIR, chapter)
    create_dir(chapter_path)
    for sub_name, info in subs.items():
        sub_path = os.path.join(chapter_path, sub_name)
        create_dir(sub_path)
        proj_type = info.get("type", "simulation")

        # Cr√©er dossiers standards
        create_standard_dirs(sub_path)

        # Cr√©er fichiers standards ou copier templates
        for f in STANDARD_FILES.get(proj_type, []):
            dest_file = os.path.join(sub_path, f)
            copy_template(proj_type, dest_file, f)

        # Cr√©er screenshots
        create_screenshots(sub_path)

        # Cr√©er fichiers backup et export avec timestamp
        create_backup_export_files(sub_path)

# --------------------------------
# R√©sum√© final
# --------------------------------
print("\n‚úÖ Arborescence compl√®te g√©n√©r√©e ! R√©sum√© :\n")
for chapter, subs in PROJECTS.items():
    print(chapter)
    for sub_name, info in subs.items():
        print(f"  ‚îî‚îÄ {sub_name} (type: {info.get('type')})")

################

# Voici une proposition de structure‚ÄØ:

# IoT_Projects/
# ‚îÇ
# ‚îú‚îÄ TEMPLATES/
# ‚îÇ   ‚îú‚îÄ simulation/
# ‚îÇ   ‚îÇ   ‚îú‚îÄ main.py
# ‚îÇ   ‚îÇ   ‚îú‚îÄ sample.csv
# ‚îÇ   ‚îÇ   ‚îî‚îÄ sample.json
# ‚îÇ   ‚îÇ
# ‚îÇ   ‚îú‚îÄ arduino/
# ‚îÇ   ‚îÇ   ‚îî‚îÄ main.ino
# ‚îÇ   ‚îÇ
# ‚îÇ   ‚îî‚îÄ simulation_ou_arduino/
# ‚îÇ       ‚îú‚îÄ main.py
# ‚îÇ       ‚îú‚îÄ sample.csv
# ‚îÇ       ‚îî‚îÄ sample.json
# ‚îÇ
# ‚îú‚îÄ Ch1_Acquisition_Donn√©es_Capteurs/
# ‚îú‚îÄ Ch2_Communication_MQTT_API/
# ‚îî‚îÄ ‚Ä¶ (autres chapitres)

# Explications‚ÄØ:

# 1 TEMPLATES/simulation/
# Contient des fichiers mod√®les pour les sous-projets de type simulation.
# Par exemple‚ÄØ: un main.py g√©n√©rique, un sample.csv vide ou avec des colonnes types, un sample.json avec structure de donn√©es de test.

# 2 TEMPLATES/arduino/
# Contient les fichiers .ino mod√®les pour les projets Arduino.

# 3 TEMPLATES/simulation_ou_arduino/
# Pour les sous-projets mixtes‚ÄØ: simulation ou Arduino. Peut contenir les m√™mes fichiers que simulation, √©ventuellement .ino si n√©cessaire.

# 4 Comment le script utilise ces templates
# Si un fichier existe dans TEMPLATES/<type>/nom_fichier, il sera copi√© dans le sous-projet correspondant.
# Sinon, un fichier vide sera cr√©√© automatiquement.

# 5 Avantage
# Tu peux pr√©parer des fichiers de base pour Django/API (main.py, settings.py, urls.py) dans TEMPLATES/simulation/ par exemple.
# Quand tu g√©n√®res l‚Äôarborescence avec le script, ces fichiers mod√®les seront automatiquement copi√©s, sans avoir besoin de cr√©er manuellement.

# exemple concret de template pour un sous-projet Django/API, avec les fichiers main.py, urls.py, views.py, requirements.txt, pr√™ts √† √™tre copi√©s dans le sous-projet correspondant.
# exemple concret de template pour un sous-projet Django/API que tu peux mettre dans ton dossier TEMPLATES/simulation/ ou cr√©er un sous-dossier sp√©cifique TEMPLATES/django_api/ si tu veux distinguer les templates Django.

# Structure du template
# TEMPLATES/
# ‚îî‚îÄ django_api/
#     ‚îú‚îÄ main.py          # fichier principal pour lancer le projet ou serveur
#     ‚îú‚îÄ requirements.txt # packages n√©cessaires
#     ‚îú‚îÄ urls.py          # routes de l‚ÄôAPI
#     ‚îú‚îÄ views.py         # logique des endpoints
#     ‚îî‚îÄ README.md        # explications sur ce sous-projet

# Contenu des fichiers

# 1. main.py

# # main.py
# # Point d'entr√©e pour le sous-projet Django/API

# import os
# import sys

# def run():
#     print("Ce template est pr√™t pour un projet Django/API.")
#     # Ici tu peux ajouter la logique pour lancer le serveur Django ou l'API

# if __name__ == "__main__":
#     run()


# 2. requirements.txt

# Django>=4.2
# djangorestframework
# paho-mqtt


# 3. urls.py

# # urls.py
# from django.urls import path
# from .views import sample_endpoint

# urlpatterns = [
#     path('api/sample/', sample_endpoint),
# ]


# 4. views.py

# # views.py
# from django.http import JsonResponse

# def sample_endpoint(request):
#     return JsonResponse({"message": "Hello, API template is working!"})


# 5. README.md

# # Template Django/API

# Ce sous-projet est un template pour d√©marrer rapidement un projet Django avec REST API.
# - main.py : point d'entr√©e
# - urls.py : d√©finition des routes
# - views.py : logique des endpoints
# - requirements.txt : packages n√©cessaires

# Comment int√©grer dans ton script

# 1 Cr√©e le dossier TEMPLATES/django_api/ dans IoT_Projects.
# 2 Copie tous ces fichiers dedans.
# 3 Dans ton script_centralise_generer_auto_template_v4.py, ajoute une √©tape‚ÄØ:

# # Exemple de copie automatique des templates
# import shutil

# def copy_template(subproject_dir, project_type):
#     template_dir = os.path.join(BASE_DIR, "TEMPLATES", project_type)
#     if os.path.exists(template_dir):
#         for file_name in os.listdir(template_dir):
#             src_file = os.path.join(template_dir, file_name)
#             dst_file = os.path.join(subproject_dir, file_name)
#             if not os.path.exists(dst_file):
#                 shutil.copy2(src_file, dst_file)


# 4 Appelle cette fonction pour les sous-projets Django/API.
# Exemple‚ÄØ:

# subproject_dir = os.path.join(BASE_DIR, "Ch2_Communication_MQTT_API", "04_API_REST_Django")
# copy_template(subproject_dir, "django_api")

# modifier directement ton script script_centralise_generer_auto_template_v4.py pour qu‚Äôil int√®gre automatiquement la copie des templates Django/API pour les sous-projets concern√©s, sans rien toucher manuellement.